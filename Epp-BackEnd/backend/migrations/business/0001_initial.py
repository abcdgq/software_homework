# Generated by Django 4.2.11 on 2025-05-05 14:09

import business.utils.storage
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AbstractReport",
            fields=[
                (
                    "file_local_path",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("report_path", models.CharField(max_length=255, unique=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("P", "未生成"),
                            ("IP", "生成中"),
                            ("C", "已生成"),
                            ("T", "超时"),
                        ],
                        default="P",
                        max_length=2,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Admin",
            fields=[
                (
                    "admin_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("admin_name", models.CharField(max_length=64)),
                ("password", models.CharField(max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name="AutoCheckRecord",
            fields=[
                (
                    "check_record_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("comment_level", models.IntegerField(default=1)),
                ("security", models.BooleanField(default=False)),
                ("labels", models.TextField(blank=True, default="", null=True)),
                ("reason", models.JSONField(blank=True, default=dict, null=True)),
                ("date", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="FirstLevelComment",
            fields=[
                (
                    "comment_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("date", models.DateTimeField(auto_now_add=True)),
                ("text", models.TextField()),
                ("like_count", models.IntegerField(default=0)),
                ("visibility", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="Paper",
            fields=[
                (
                    "paper_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("authors", models.CharField(max_length=255)),
                ("abstract", models.TextField()),
                ("publication_date", models.DateField()),
                ("journal", models.CharField(max_length=255, null=True)),
                ("citation_count", models.IntegerField(default=0)),
                ("original_url", models.URLField()),
                ("read_count", models.IntegerField(default=0)),
                ("like_count", models.IntegerField(default=0)),
                ("collect_count", models.IntegerField(default=0)),
                ("comment_count", models.IntegerField(default=0)),
                ("download_count", models.IntegerField(default=0)),
                ("score", models.FloatField(default=0.0)),
                ("score_count", models.IntegerField(default=0)),
                ("local_path", models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="problem_record",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content",
                    models.TextField(blank=True, null=True, verbose_name="问题内容"),
                ),
                ("number", models.PositiveIntegerField(default=0, verbose_name="出现次数")),
            ],
            options={
                "verbose_name": "问题记录",
                "verbose_name_plural": "问题记录",
                "ordering": ["-number"],
            },
        ),
        migrations.CreateModel(
            name="Subclass",
            fields=[
                (
                    "subclass_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "user_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("username", models.CharField(max_length=255)),
                ("password", models.CharField(max_length=255)),
                (
                    "avatar",
                    models.ImageField(
                        default="uploads/users/avatars/default.jpg",
                        null=True,
                        storage=business.utils.storage.ImageStorage(),
                        upload_to="uploads/users/avatars/",
                    ),
                ),
                ("registration_date", models.DateTimeField(auto_now_add=True)),
                (
                    "collected_papers",
                    models.ManyToManyField(
                        blank=True,
                        related_name="collected_by_users",
                        to="business.paper",
                    ),
                ),
                (
                    "liked_papers",
                    models.ManyToManyField(
                        blank=True, related_name="liked_by_users", to="business.paper"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserDailyAddition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(auto_now=True)),
                ("addition", models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name="UserVisit",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ip_address", models.GenericIPAddressField()),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "unique_together": {("ip_address", "timestamp")},
            },
        ),
        migrations.CreateModel(
            name="UserDocument",
            fields=[
                (
                    "document_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("local_path", models.CharField(max_length=255)),
                ("upload_date", models.DateTimeField(auto_now_add=True)),
                ("format", models.CharField(max_length=50)),
                ("size", models.IntegerField()),
                (
                    "user_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="business.user"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SummaryReport",
            fields=[
                (
                    "report_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("report_path", models.CharField(max_length=255, unique=True)),
                ("title", models.CharField(max_length=255)),
                ("date", models.DateTimeField(auto_now_add=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("P", "未生成"), ("IP", "生成中"), ("C", "已生成")],
                        default="C",
                        max_length=2,
                    ),
                ),
                (
                    "user_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="business.user"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SecondLevelComment",
            fields=[
                (
                    "comment_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("date", models.DateTimeField(auto_now_add=True)),
                ("text", models.TextField()),
                ("like_count", models.IntegerField(default=0)),
                ("visibility", models.BooleanField(default=False)),
                (
                    "level1_comment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="business.firstlevelcomment",
                    ),
                ),
                (
                    "liked_by_users",
                    models.ManyToManyField(
                        blank=True,
                        related_name="liked_second_level_comments",
                        to="business.user",
                    ),
                ),
                (
                    "paper_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="business.paper"
                    ),
                ),
                (
                    "reply_comment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="business.secondlevelcomment",
                    ),
                ),
                (
                    "user_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="business.user"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SearchRecord",
            fields=[
                (
                    "search_record_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("keyword", models.CharField(max_length=255)),
                ("date", models.DateTimeField(auto_now=True)),
                ("conversation_path", models.CharField(max_length=255, null=True)),
                ("search_content", models.TextField(blank=True, null=True)),
                ("x", models.TextField(blank=True, null=True)),
                (
                    "related_papers",
                    models.ManyToManyField(
                        blank=True,
                        related_name="related_search_record",
                        to="business.paper",
                    ),
                ),
                (
                    "user_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="business.user"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RecommendedPaper",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("recommend_score", models.FloatField(default=0.0)),
                (
                    "paper",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="business.paper"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="paper",
            name="sub_classes",
            field=models.ManyToManyField(related_name="papers", to="business.subclass"),
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "notification_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("date", models.DateTimeField(auto_now_add=True)),
                ("content", models.TextField()),
                ("is_read", models.BooleanField(default=False)),
                (
                    "user_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="business.user"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="firstlevelcomment",
            name="liked_by_users",
            field=models.ManyToManyField(
                blank=True,
                related_name="liked_first_level_comments",
                to="business.user",
            ),
        ),
        migrations.AddField(
            model_name="firstlevelcomment",
            name="paper_id",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="business.paper"
            ),
        ),
        migrations.AddField(
            model_name="firstlevelcomment",
            name="user_id",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="business.user"
            ),
        ),
        migrations.CreateModel(
            name="FileNote",
            fields=[
                (
                    "note_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("date", models.DateTimeField(auto_now=True)),
                ("x", models.FloatField(default=0.0)),
                ("y", models.FloatField(default=0.0)),
                ("width", models.FloatField(default=0.0)),
                ("height", models.FloatField(default=0.0)),
                ("pageNum", models.IntegerField(default=1)),
                ("comment", models.TextField(default="")),
                ("username", models.CharField(max_length=255)),
                ("isPublic", models.BooleanField(default=False)),
                (
                    "paper_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="business.paper",
                    ),
                ),
                (
                    "user_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="business.user"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FileAnnotation",
            fields=[
                (
                    "annotation_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("date", models.DateTimeField(auto_now=True)),
                ("visibility", models.BooleanField(default=True)),
                (
                    "note",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="business.filenote",
                    ),
                ),
                (
                    "paper_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="business.paper",
                    ),
                ),
                (
                    "user_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="business.user"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DocumentNote",
            fields=[
                (
                    "note_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("date", models.DateTimeField(auto_now=True)),
                ("x", models.FloatField(default=0.0)),
                ("y", models.FloatField(default=0.0)),
                ("width", models.FloatField(default=0.0)),
                ("height", models.FloatField(default=0.0)),
                ("pageNum", models.IntegerField(default=1)),
                ("comment", models.TextField(default="")),
                ("username", models.CharField(max_length=255)),
                (
                    "document",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="business.userdocument",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="business.user"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CommentReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("comment_level", models.IntegerField(default=1)),
                ("date", models.DateTimeField(auto_now_add=True)),
                ("content", models.TextField(blank=True, null=True)),
                ("judgment", models.TextField(blank=True, null=True)),
                ("processed", models.BooleanField(default=False)),
                (
                    "comment_id_1",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="business.firstlevelcomment",
                    ),
                ),
                (
                    "comment_id_2",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="business.secondlevelcomment",
                    ),
                ),
                (
                    "user_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="business.user"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AutoUndoRecord",
            fields=[
                (
                    "undo_record_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("comment_level", models.IntegerField(default=1)),
                (
                    "comment_id_1",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="business.firstlevelcomment",
                    ),
                ),
                (
                    "comment_id_2",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="business.secondlevelcomment",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AutoRiskRecord",
            fields=[
                (
                    "risk_record_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "check_record",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="business.autocheckrecord",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="autocheckrecord",
            name="comment_id_1",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="business.firstlevelcomment",
            ),
        ),
        migrations.AddField(
            model_name="autocheckrecord",
            name="comment_id_2",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="business.secondlevelcomment",
            ),
        ),
        migrations.CreateModel(
            name="AnnotationReport",
            fields=[
                (
                    "report_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("date", models.DateTimeField(auto_now_add=True)),
                ("content", models.TextField(blank=True, null=True)),
                ("judgment", models.TextField(blank=True, default="", null=True)),
                ("processed", models.BooleanField(default=False)),
                (
                    "annotation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="business.fileannotation",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="business.user"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PaperScore",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "score",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ]
                    ),
                ),
                (
                    "paper_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="business.paper"
                    ),
                ),
                (
                    "user_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="business.user"
                    ),
                ),
            ],
            options={
                "unique_together": {("user_id", "paper_id")},
            },
        ),
        migrations.CreateModel(
            name="FileReading",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("conversation_path", models.CharField(max_length=255, null=True)),
                ("date", models.DateTimeField(auto_now=True)),
                (
                    "document_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="business.userdocument",
                    ),
                ),
                (
                    "paper_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="business.paper",
                    ),
                ),
                (
                    "user_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="business.user"
                    ),
                ),
            ],
            options={
                "unique_together": {("user_id", "conversation_path")},
            },
        ),
    ]
